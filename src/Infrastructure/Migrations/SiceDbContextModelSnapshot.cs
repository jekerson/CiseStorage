// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SiceDbContext))]
    partial class SiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("apartment");

                    b.Property<string>("Building")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("building");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("house");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("address_pkey");

                    b.HasIndex(new[] { "RegionId" }, "idx_address_region_id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttributeCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("attribute_category_id");

                    b.Property<int?>("AttributeUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("attribute_unit_id");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("attribute_pkey");

                    b.HasIndex(new[] { "Name" }, "attribute_name_key")
                        .IsUnique();

                    b.HasIndex(new[] { "AttributeCategoryId" }, "idx_attribute_attribute_category_id");

                    b.HasIndex(new[] { "AttributeUnitId" }, "idx_attribute_attribute_unit_id");

                    b.ToTable("attribute", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AttributeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("attribute_category_pkey");

                    b.HasIndex(new[] { "Name" }, "attribute_category_name_key")
                        .IsUnique();

                    b.ToTable("attribute_category", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AttributeUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttributeValueTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("attribute_value_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("symbol");

                    b.Property<int?>("UnitCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_category_id");

                    b.HasKey("Id")
                        .HasName("attribute_unit_pkey");

                    b.HasIndex(new[] { "Name" }, "attribute_unit_name_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Symbol" }, "attribute_unit_symbol_key")
                        .IsUnique();

                    b.HasIndex(new[] { "AttributeValueTypeId" }, "idx_attribute_unit_attribute_value_type_id");

                    b.HasIndex(new[] { "UnitCategoryId" }, "idx_attribute_unit_unit_category_id");

                    b.ToTable("attribute_unit", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AttributeValueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("attribute_value_type_pkey");

                    b.HasIndex(new[] { "Name" }, "attribute_value_type_name_key")
                        .IsUnique();

                    b.ToTable("attribute_value_type", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_address");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_number");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("sex");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("employee_pkey");

                    b.HasIndex(new[] { "EmailAddress" }, "employee_email_address_key")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "employee_phone_number_key")
                        .IsUnique();

                    b.HasIndex(new[] { "AddressId" }, "idx_employee_address_id");

                    b.HasIndex(new[] { "IsDeleted" }, "idx_employee_is_deleted");

                    b.HasIndex(new[] { "PositionId" }, "idx_employee_position_id");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EmployeeAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTime?>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("integer")
                        .HasColumnName("changed_by");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_address");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.Property<string>("Sex")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("sex");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("employee_audit_pkey");

                    b.HasIndex(new[] { "ChangedAt" }, "idx_employee_audit_changed_at");

                    b.HasIndex(new[] { "ChangedBy" }, "idx_employee_audit_changed_by");

                    b.HasIndex(new[] { "EmployeeId" }, "idx_employee_audit_employee_id");

                    b.ToTable("employee_audit", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("item_pkey");

                    b.HasIndex(new[] { "CategoryId" }, "idx_item_category_id");

                    b.HasIndex(new[] { "IsDeleted" }, "idx_item_is_deleted");

                    b.HasIndex(new[] { "Name" }, "item_name_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Number" }, "item_number_key")
                        .IsUnique();

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ItemAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttributeId")
                        .HasColumnType("integer")
                        .HasColumnName("attribute_id");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("item_attribute_value_pkey");

                    b.HasIndex(new[] { "AttributeId" }, "idx_item_attribute_value_attribute_id");

                    b.HasIndex(new[] { "ItemId" }, "idx_item_attribute_value_item_id");

                    b.ToTable("item_attribute_value", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ItemAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("integer")
                        .HasColumnName("changed_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("item_audit_pkey");

                    b.HasIndex(new[] { "ChangedAt" }, "idx_item_audit_changed_at");

                    b.HasIndex(new[] { "ChangedBy" }, "idx_item_audit_changed_by");

                    b.HasIndex(new[] { "ItemId" }, "idx_item_audit_item_id");

                    b.ToTable("item_audit", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_category_id");

                    b.HasKey("Id")
                        .HasName("item_category_pkey");

                    b.HasIndex(new[] { "ParentCategoryId" }, "idx_item_category_parent_category_id");

                    b.HasIndex(new[] { "Name" }, "item_category_name_key")
                        .IsUnique();

                    b.ToTable("item_category", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ItemCategoryAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttributeId")
                        .HasColumnType("integer")
                        .HasColumnName("attribute_id");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("item_category_id");

                    b.HasKey("Id")
                        .HasName("item_category_attribute_pkey");

                    b.HasIndex(new[] { "AttributeId" }, "idx_item_category_attribute_attribute_id");

                    b.HasIndex(new[] { "ItemCategoryId" }, "idx_item_category_attribute_item_category_id");

                    b.ToTable("item_category_attribute", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ItemResponsibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("UnassignedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("unassigned_at");

                    b.HasKey("Id")
                        .HasName("item_responsibility_pkey");

                    b.HasIndex(new[] { "EmployeeId" }, "idx_item_responsibility_employee_id");

                    b.HasIndex(new[] { "ItemId" }, "idx_item_responsibility_item_id");

                    b.ToTable("item_responsibility", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ItemResponsibilityAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("assigned_at");

                    b.Property<DateTime?>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("integer")
                        .HasColumnName("changed_by");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int?>("ItemResponsibilityId")
                        .HasColumnType("integer")
                        .HasColumnName("item_responsibility_id");

                    b.Property<DateTime?>("UnassignedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("unassigned_at");

                    b.HasKey("Id")
                        .HasName("item_responsibility_audit_pkey");

                    b.HasIndex(new[] { "ChangedAt" }, "idx_item_responsibility_audit_changed_at");

                    b.HasIndex(new[] { "ChangedBy" }, "idx_item_responsibility_audit_changed_by");

                    b.HasIndex(new[] { "EmployeeId" }, "idx_item_responsibility_audit_employee_id");

                    b.HasIndex(new[] { "ItemId" }, "idx_item_responsibility_audit_item_id");

                    b.HasIndex(new[] { "ItemResponsibilityId" }, "idx_item_responsibility_audit_item_responsibility_id");

                    b.ToTable("item_responsibility_audit", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("permission_pkey");

                    b.HasIndex(new[] { "Name" }, "permission_name_key")
                        .IsUnique();

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("position_pkey");

                    b.HasIndex(new[] { "Name" }, "position_name_key")
                        .IsUnique();

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserInfoId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserInfoId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token");

                    b.HasIndex("UserInfoId");

                    b.HasIndex("UserInfoId1");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("region_pkey");

                    b.HasIndex(new[] { "Name" }, "region_name_key")
                        .IsUnique();

                    b.ToTable("region", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("role_pkey");

                    b.HasIndex(new[] { "Name" }, "role_name_key")
                        .IsUnique();

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("role_permission_pkey");

                    b.HasIndex(new[] { "PermissionId" }, "idx_role_permission_permission_id");

                    b.HasIndex(new[] { "RoleId" }, "idx_role_permission_role_id");

                    b.ToTable("role_permission", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UnitCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("unit_category_pkey");

                    b.HasIndex(new[] { "Name" }, "unit_category_name_key")
                        .IsUnique();

                    b.ToTable("unit_category", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("hashed_password");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("user_info_pkey");

                    b.HasIndex(new[] { "EmployeeId" }, "idx_user_info_employee_id");

                    b.HasIndex(new[] { "IsDeleted" }, "idx_user_info_is_deleted");

                    b.HasIndex(new[] { "Salt" }, "user_info_salt_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "user_info_username_key")
                        .IsUnique();

                    b.ToTable("user_info", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserInfoAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<DateTime?>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("integer")
                        .HasColumnName("changed_by");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("HashedPassword")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("hashed_password");

                    b.Property<string>("Salt")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("salt");

                    b.Property<int?>("UserInfoId")
                        .HasColumnType("integer")
                        .HasColumnName("user_info_id");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("user_info_audit_pkey");

                    b.HasIndex(new[] { "ChangedAt" }, "idx_user_info_audit_changed_at");

                    b.HasIndex(new[] { "ChangedBy" }, "idx_user_info_audit_changed_by");

                    b.HasIndex(new[] { "UserInfoId" }, "idx_user_info_audit_user_info_id");

                    b.ToTable("user_info_audit", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("UserInfoId")
                        .HasColumnType("integer")
                        .HasColumnName("user_info_id");

                    b.HasKey("Id")
                        .HasName("user_role_pkey");

                    b.HasIndex(new[] { "RoleId" }, "idx_user_role_role_id");

                    b.HasIndex(new[] { "UserInfoId" }, "idx_user_role_user_info_id");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.Region", "Region")
                        .WithMany("Addresses")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("address_region_id_fkey");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Entities.Attribute", b =>
                {
                    b.HasOne("Domain.Entities.AttributeCategory", "AttributeCategory")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeCategoryId")
                        .HasConstraintName("attribute_attribute_category_id_fkey");

                    b.HasOne("Domain.Entities.AttributeUnit", "AttributeUnit")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeUnitId")
                        .HasConstraintName("attribute_attribute_unit_id_fkey");

                    b.Navigation("AttributeCategory");

                    b.Navigation("AttributeUnit");
                });

            modelBuilder.Entity("Domain.Entities.AttributeUnit", b =>
                {
                    b.HasOne("Domain.Entities.AttributeValueType", "AttributeValueType")
                        .WithMany("AttributeUnits")
                        .HasForeignKey("AttributeValueTypeId")
                        .HasConstraintName("attribute_unit_attribute_value_type_id_fkey");

                    b.HasOne("Domain.Entities.UnitCategory", "UnitCategory")
                        .WithMany("AttributeUnits")
                        .HasForeignKey("UnitCategoryId")
                        .HasConstraintName("attribute_unit_unit_category_id_fkey");

                    b.Navigation("AttributeValueType");

                    b.Navigation("UnitCategory");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithMany("Employees")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employee_address_id_fkey");

                    b.HasOne("Domain.Entities.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employee_position_id_fkey");

                    b.Navigation("Address");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Domain.Entities.EmployeeAudit", b =>
                {
                    b.HasOne("Domain.Entities.UserInfo", "ChangedByNavigation")
                        .WithMany("EmployeeAudits")
                        .HasForeignKey("ChangedBy")
                        .HasConstraintName("employee_audit_changed_by_fkey");

                    b.Navigation("ChangedByNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.HasOne("Domain.Entities.ItemCategory", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("item_category_id_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.ItemAttributeValue", b =>
                {
                    b.HasOne("Domain.Entities.Attribute", "Attribute")
                        .WithMany("ItemAttributeValues")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("item_attribute_value_attribute_id_fkey");

                    b.HasOne("Domain.Entities.Item", "Item")
                        .WithMany("ItemAttributeValues")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("item_attribute_value_item_id_fkey");

                    b.Navigation("Attribute");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Domain.Entities.ItemAudit", b =>
                {
                    b.HasOne("Domain.Entities.UserInfo", "ChangedByNavigation")
                        .WithMany("ItemAudits")
                        .HasForeignKey("ChangedBy")
                        .HasConstraintName("item_audit_changed_by_fkey");

                    b.Navigation("ChangedByNavigation");
                });

            modelBuilder.Entity("Domain.Entities.ItemCategory", b =>
                {
                    b.HasOne("Domain.Entities.ItemCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("item_category_parent_category_id_fkey");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Domain.Entities.ItemCategoryAttribute", b =>
                {
                    b.HasOne("Domain.Entities.Attribute", "Attribute")
                        .WithMany("ItemCategoryAttributes")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("item_category_attribute_attribute_id_fkey");

                    b.HasOne("Domain.Entities.ItemCategory", "ItemCategory")
                        .WithMany("ItemCategoryAttributes")
                        .HasForeignKey("ItemCategoryId")
                        .HasConstraintName("item_category_attribute_item_category_id_fkey");

                    b.Navigation("Attribute");

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("Domain.Entities.ItemResponsibility", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("ItemResponsibilities")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("item_responsibility_employee_id_fkey");

                    b.HasOne("Domain.Entities.Item", "Item")
                        .WithMany("ItemResponsibilities")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("item_responsibility_item_id_fkey");

                    b.Navigation("Employee");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Domain.Entities.ItemResponsibilityAudit", b =>
                {
                    b.HasOne("Domain.Entities.UserInfo", "ChangedByNavigation")
                        .WithMany("ItemResponsibilityAudits")
                        .HasForeignKey("ChangedBy")
                        .HasConstraintName("item_responsibility_audit_changed_by_fkey");

                    b.Navigation("ChangedByNavigation");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserInfo", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserInfoId1");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_permission_permission_id_fkey");

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_permission_role_id_fkey");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UserInfo", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("UserInfos")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_info_employee_id_fkey");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.UserInfoAudit", b =>
                {
                    b.HasOne("Domain.Entities.UserInfo", "ChangedByNavigation")
                        .WithMany("UserInfoAudits")
                        .HasForeignKey("ChangedBy")
                        .HasConstraintName("user_info_audit_changed_by_fkey");

                    b.Navigation("ChangedByNavigation");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_role_role_id_fkey");

                    b.HasOne("Domain.Entities.UserInfo", "UserInfo")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_role_user_info_id_fkey");

                    b.Navigation("Role");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Attribute", b =>
                {
                    b.Navigation("ItemAttributeValues");

                    b.Navigation("ItemCategoryAttributes");
                });

            modelBuilder.Entity("Domain.Entities.AttributeCategory", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Domain.Entities.AttributeUnit", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Domain.Entities.AttributeValueType", b =>
                {
                    b.Navigation("AttributeUnits");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("ItemResponsibilities");

                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.Navigation("ItemAttributeValues");

                    b.Navigation("ItemResponsibilities");
                });

            modelBuilder.Entity("Domain.Entities.ItemCategory", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("ItemCategoryAttributes");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Region", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.UnitCategory", b =>
                {
                    b.Navigation("AttributeUnits");
                });

            modelBuilder.Entity("Domain.Entities.UserInfo", b =>
                {
                    b.Navigation("EmployeeAudits");

                    b.Navigation("ItemAudits");

                    b.Navigation("ItemResponsibilityAudits");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserInfoAudits");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
